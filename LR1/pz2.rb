"""Принять имя пользователя как аргумент программы.
Поздороваться с пользователем. Рассмотреть тип строка. 
Получить все методы, рассмотреть irb режим, включить снимок экрана в отчет.
Разобрать и включить в отчет половину методов с использованием
официальной документации языка. Для решения задачи необходимо
рассмотреть встроенные переменные и константы, включить их в отчет,
рассмотреть способы форматирования сроки, включить в отчет. """

# Переход в irb режим - irb в консоль.

# Здроваемся
#puts "Hello user! Please enter your name: "
#name = gets.chomp
#puts "Nice to meet you #{name}"

# Рассматриваем методы строк

# % - Модифицирует в соответствии с переданным аргументом
str = "Пицца = %{taste}" % {taste: "вкусно!"} 
puts(str)
str = "Пицца - %{taste}, морепродукты - %{grose}" % {taste: "вкусно!", grose: "не вкусно(("}
puts(str)


# * integer - Умножает строку на число (новая строка на выходе)
# + - Конкатинация строк
str = "Оле, " * 3 + "Россия чемпион!"
puts(str)


# << - Конкатинация при условии соблюдения типов
str = "Бутер"
str << "брод" # => "Бутерброд"
puts(str)

# строка <=> вторая_строка → 
    # -1 Если вторая строка меньше
    # 0 Если эквивалентны
    # 1 Если вторая строка больше
    # nil если не сравнимы
puts("Кот" <=> "кот")
puts("Кот" <=> "Кот")
puts("Кот" <=> "КОТЯРА")
puts("Кот" <=> 1) # Тут будет Nil, но в консоль печатается как пустя строка

# == - Логическое сравнение, возвращает True\False
# Вернёт False, если строки не сравнимы
str = "Кот"
puts("Кот" == str)
puts("Кот" == "Мышь")


# string =~ regexp → Число или Nil (Ищет индекс первого вхождения подстроки)
puts("Чизбургер" =~ /бургер/) # => 3
puts("Чизбургер" =~ /Чиз/) # => 0
puts("Чизбургер" =~ /Гам/) # => nil


# string[index] → new_string or nil
# string[start, length] → new_string or nil
str = "Котлета с пюрешкой"
puts(str[8])
puts(str[0, 3] + " " + str[8, 17])


# Метод .capitalize → new_str, возвращает новую строку - первая буква заглавная, а остальные прописные
# .capitalize! возвращает nil, если не было сделано изменений
str = "ИЗУЧАЮ РУБИ"
puts(str.capitalize) # => Изучаю руби


# casecmp(other_str) → Сравнивает строки по регистру и возвращает -1, 0, 1, or nil 
puts('гамбургер'.casecmp('Бургер')) # => 1 (вторая строка больше)


# center(width, padstr=' ') → new_str, новая строка это отцентрованная символами аргумента - первая строка
# Примечание: первый аргумент должен быть больше строки (отсчёт идёт из её центра)
puts("hello".center(4))         #=> "hello"
puts("hello".center(20))        #=> "       hello        "
puts("hello".center(20, '-+-')) #=> "-+--+--hello-+--+--+"


# .chars - Получить массив символов из строки
str = "Это строка, но массив"
print(str.chars) # => ["Э", "т", "о", ... "м", "а", "с", "с", "и", "в"]


# .chomp - Сепаратор, удаляет служебные переносы в конце строки, либо заданный аргумент в конце строки
puts("\nПроверка\n".chomp)              #=> "Проверка"
puts("Проверка".chomp("верка"))       #=> "Про"


# .chop - Возвращает новую строку, но с удалённым последним символом, кроме того, если это служебные переносы, то удаляет только их
puts("Проверка".chop)  #=> "Проверк"


# .chr - Возвращает первый символ строки
puts("1234".chr)    #=> "1"


# .clear - Просто отчищает строку
puts("1234".clear) #=> ""


# arg1.concat(arg2, ..., argn) - Конкатинирует строки
puts("Кото".concat("пёс"))          #=> "котопёс"


# .delete() - удаляет подстроку из строки
# .delete_prefix .delete_suffix
puts("hello".delete "o")    #=> hell


# .downcase - понижает регистр
puts("ЭТО НАПИСАНО НЕ КАПСОМ".downcase)


# .empty? - true\false
puts("".empty?) # => true


# .end_with?(args) - Оканчивается ли строка на эти аргументы? true\false
puts("hello".end_with?("ello"))               #=> true
# returns true if one of the +suffixes+ matches.
puts("hello".end_with?("heaven", "ello"))     #=> true
puts("hello".end_with?("heaven", "paradise")) #=> false


# .eql? - true\false, эквивалентны по длине и содержанию
puts("Кот".eql?("Кот")) # true 


# .hex - Из строки (в которой hex число) возвращает int значение
puts("0x0a".hex)     #=> 10


# .include?() - включает ли строка следующую подстроку? true\false
puts("Чизбургер".include? "бургер") #=> true


# .index() - Выдаёт индекс подстроки в строке, integer or nil
puts("Бургер".index("Б")) #=> 0


# .replace - замена строки аргументом
s = "hello"         #=> "hello"
puts(s.replace "world")   #=> "world"

# .insert(index, string) - вставляет в строку 
puts("Раз три".insert(3, " два")) #=> Раз два три


# .lenght - integer длина строки
puts("123456789".length) #=> 9


# .succ - Возвращает новую строку - "умный" инкремент
puts("player 1".succ)       #=> player 2


